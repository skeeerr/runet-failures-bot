from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
from aiogram.utils.exceptions import BotBlocked
from datetime import datetime, timedelta
import logging

import config
import db
import utils

bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

WELCOME_TEXT = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ —Å–±–æ—è–º –†—É–Ω–µ—Ç–∞. –¢–µ–ø–µ—Ä—å —Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–±–æ—è—Ö –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. üåê\n"
    "–ï—Å–ª–∏ –Ω–∞–¥–æ–µ—Å—Ç ‚Äî –±–ª–æ–∫–∏—Ä—É–π –±–æ—Ç–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ª–µ—Ç–µ—Ç—å —Ç–µ–±–µ –Ω–µ –±—É–¥—É—Ç ‚ù§Ô∏è\n"
    "–í—Å—è –æ—Å—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –±–æ—Ç–æ–≤ –±—É–¥—É—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ üëá\n"
    "‚ö†Ô∏è–ì–ª–∞–≤–Ω—ã–π –±–æ—Ç - @downdetect0rbot\n"
    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏! üë•"
)

ADMIN_TEXT = (
    "üë§–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞:\n"
    "ü§¥@internetmodel - –≤–ª–∞–¥–µ–ª–µ—Ü, –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –±–æ—Ç–∞ - –∫ –Ω–µ–º—É\n"
    "üßë‚Äçüíª@overnightwatch - –∫–æ–¥–µ—Ä, –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –∏—Ö –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"
)

COMMANDS_TEXT = (
    "/last - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–±–æ—è—Ö\n"
    "/mirror - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–µ—Ä–∫–∞–ª–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @botfather\n"
    "/admins - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞ (–µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å –Ω–∏–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è)"
)

@dp.message_handler(commands=["start"])
async def handle_start(message: types.Message):
    ref_id = None
    if message.get_args():
        try:
            ref_id = int(message.get_args())
        except ValueError:
            pass
    db.add_user(message.from_user.id, referral_id=ref_id)
    await message.answer(WELCOME_TEXT)

@dp.message_handler(commands=["stats"])
async def handle_stats(message: types.Message):
    if message.from_user.id not in config.ADMIN_IDS:
        return
    stats = db.get_stats()
    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}\n"
        f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {stats['blocked']}\n"
        f"–ù–æ–≤—ã—Ö –∑–∞ –¥–µ–Ω—å: {stats['daily']}\n"
        f"–ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['weekly']}\n"
        f"–ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {stats['monthly']}"
    )
    await message.answer(text)

@dp.message_handler(commands=["broadcast"])
async def broadcast_message(message: types.Message):
    if message.from_user.id not in config.ADMIN_IDS:
        return
    if not message.reply_to_message:
        await message.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        return

    text = message.reply_to_message.text
    db.save_broadcast(text)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    count = 0
    for user_id in db.get_active_users():
        try:
            await bot.send_message(user_id, text)
            count += 1
        except BotBlocked:
            db.block_user(user_id)
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

@dp.message_handler(commands=["last"])
async def handle_last(message: types.Message):
    messages = db.get_last_broadcasts(limit=5)
    if not messages:
        await message.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return

    formatted = "\n\n".join(
        f"üïí {msg['time']} (GMT+4):\n{msg['text']}"
        for msg in messages
    )
    await message.answer(f"üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–æ–≤:\n\n{formatted}")

@dp.message_handler(commands=["admins"])
async def handle_admins(message: types.Message):
    await message.answer(ADMIN_TEXT)

@dp.message_handler(commands=["command"])
async def handle_command(message: types.Message):
    await message.answer(COMMANDS_TEXT)

@dp.message_handler(commands=["mirror"])
async def handle_mirror(message: types.Message):
    await message.answer("–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–µ—Ä–∫–∞–ª–æ –±–æ—Ç–∞, –∑–∞–π–¥–∏—Ç–µ –≤ @BotFather, –Ω–∞–∂–º–∏—Ç–µ /newbot –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.")

if __name__ == "__main__":
    executor.start_polling(dp)

