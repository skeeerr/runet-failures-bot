import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.exceptions import BotBlocked

import config
import db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# –°—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
apps = {
    "telegram": "https://downdetector.su/telegram",
    "youtube": "https://downdetector.su/youtube",
    "vkontakte": "https://downdetector.su/vkontakte",
    "tiktok": "https://downdetector.su/tiktok",
}

# –¢–µ–∫—Å—Ç—ã
WELCOME_TEXT = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ —Å–±–æ—è–º –†—É–Ω–µ—Ç–∞. üåê\n\n"
    "–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∫—Ä—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤. "
    "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–±–æ–∏, –≤–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.\n\n"
    "‚ö†Ô∏è–ì–ª–∞–≤–Ω—ã–π –±–æ—Ç - @nosignalrubot\n"
    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏! üë•\n\n"
    "üîª–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∏–∂–µ:"
)

COMMANDS_TEXT = (
    "/last - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–æ–≤\n"
    "/ref - –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n"
    "/refstats - —Ç–æ–ø-10 –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º\n"
    "/admins - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞\n"
    "/admin - –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n"
    "/broadcast <—Ç–µ–∫—Å—Ç> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"
)

ADMIN_TEXT = (
    "üë§–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞:\n"
    "üßî@internetmodel - –≤–ª–∞–¥–µ–ª–µ—Ü\n"
    "üßë‚Äçüíª@overnightwatch - –∫–æ–¥–µ—Ä"
)

ADMIN_LOG_ID = config.ADMIN_IDS[0]

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üõ†–°–µ—Ä–≤–∏—Å—ã", callback_data="menu_services"),
    InlineKeyboardButton("‚ö†Ô∏è–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–±–æ–∏", callback_data="menu_last"),
    InlineKeyboardButton("üîó–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="menu_ref"),
    InlineKeyboardButton("üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞", callback_data="menu_admins"),
    InlineKeyboardButton("üîπ–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="menu_commands")
)

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=["start"])
async def handle_start(message: types.Message):
    ref_id = None
    if message.get_args():
        try:
            ref_id = int(message.get_args())
        except ValueError:
            pass

    full_name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()
    db.add_user(message.from_user.id, name=full_name, referral_id=ref_id)
    await message.answer(WELCOME_TEXT, reply_markup=main_menu)

    if ref_id and ref_id != message.from_user.id:
        await bot.send_message(
            ADMIN_LOG_ID,
            f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ –æ—Ç ID {ref_id}"
        )

# –ö–æ–º–∞–Ω–¥–∞ /broadcast
@dp.message_handler(commands=["broadcast"])
async def broadcast_message(message: types.Message):
    if message.from_user.id not in config.ADMIN_IDS:
        return await message.reply("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

    text = message.get_args()
    if not text:
        return await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>")

    users = db.get_all_user_ids()
    success, failed = 0, 0

    for user_id in users:
        try:
            await bot.send_message(user_id, text)
            success += 1
        except BotBlocked:
            failed += 1
        except Exception as e:
            logging.exception(e)
            failed += 1

    await message.reply(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n–£—Å–ø–µ—à–Ω–æ: {success}\n–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}")

# –ú–µ–Ω—é: –ê–¥–º–∏–Ω—ã
@dp.callback_query_handler(lambda c: c.data == "menu_admins")
async def menu_admins(callback: types.CallbackQuery):
    await callback.message.delete()
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main"))
    await bot.send_message(callback.from_user.id, ADMIN_TEXT, reply_markup=kb)

# –ú–µ–Ω—é: –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.callback_query_handler(lambda c: c.data == "menu_admin")
async def menu_admin_panel(callback: types.CallbackQuery):
    await callback.message.delete()
    if callback.from_user.id not in config.ADMIN_IDS:
        return await bot.send_message(callback.from_user.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

    kb = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_broadcast"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")
    )
    await bot.send_message(callback.from_user.id, "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

# –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
@dp.callback_query_handler(lambda c: c.data == "admin_broadcast")
async def prompt_broadcast(callback: types.CallbackQuery):
    await callback.message.delete()
    await bot.send_message(callback.from_user.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

# –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(lambda msg: msg.reply_to_message and "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏" in msg.reply_to_message.text)
async def handle_broadcast_reply(msg: types.Message):
    if msg.from_user.id not in config.ADMIN_IDS:
        return await msg.reply("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

    text = msg.text
    users = db.get_all_user_ids()
    success, failed = 0, 0

    for user_id in users:
        try:
            await bot.send_message(user_id, text)
            success += 1
        except BotBlocked:
            failed += 1
        except Exception as e:
            logging.exception(e)
            failed += 1

    await msg.reply(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n–£—Å–ø–µ—à–Ω–æ: {success}\n–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}")

# –ú–µ–Ω—é: –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query_handler(lambda c: c.data == "menu_main")
async def return_main_menu(callback: types.CallbackQuery):
    await callback.message.delete()
    await bot.send_message(callback.from_user.id, WELCOME_TEXT, reply_markup=main_menu)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    db.init_db()
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())




