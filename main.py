import asyncio
import logging
import os
from datetime import datetime
from zoneinfo import ZoneInfo

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode, ContentType
from aiogram.exceptions import TelegramForbiddenError
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    Message,
)
from middlewares import RateLimiterMiddleware, ErrorHandlerMiddleware
import config
import db

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="[%(asctime)s] %(levelname)s - %(name)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=config.BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# Middlewares
dp.message.middleware(RateLimiterMiddleware())
dp.callback_query.middleware(RateLimiterMiddleware())
dp.update.middleware(ErrorHandlerMiddleware())

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class EditNameState(StatesGroup):
    WaitingForName = State()

class BroadcastStates(StatesGroup):
    WaitingForMessage = State()
    ConfirmingMessage = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ö†Ô∏è–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–±–æ–∏", callback_data="menu_last")],
    [InlineKeyboardButton(text="üîó–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="menu_ref")],
    [InlineKeyboardButton(text="üé≠ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ", callback_data="menu_me")],
    [InlineKeyboardButton(text="üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞", callback_data="menu_admins")],
    [InlineKeyboardButton(text="üïπÔ∏è–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="menu_commands")],
])

WELCOME_TEXT = config.WELCOME_TEXT

COMMANDS_TEXT = (
    "/last - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–æ–≤\n"
    "/ref - –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n"
    "/refstats - —Ç–æ–ø-10 –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º\n"
    "/admins - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞\n"
    "/admin - –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n"
    "/me - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ"
)

ADMIN_TEXT = (
    "üë§–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞:\n"
    "ü§¥@internetmodel - –≤–ª–∞–¥–µ–ª–µ—Ü\n"
    "üßë‚Äçüíª@overnightwatch - –∫–æ–¥–µ—Ä"
)

ADMIN_LOG_ID = config.ADMIN_IDS[0] if config.ADMIN_IDS else None

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def send_ref_stats_page(user_id, page=1, page_size=10):
    try:
        top = db.get_top_referrers(limit=page_size*2)
        if not top:
            return "üë• –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", None

        total_pages = (len(top) + page_size - 1) // page_size
        start = (page - 1) * page_size
        end = start + page_size
        page_data = top[start:end]

        text = f"üë• <b>–¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (—Å—Ç—Ä. {page}/{total_pages}):</b>\n"
        for i, row in enumerate(page_data, start+1):
            name = row['name'] or f"ID {row['user_id']}"
            text += f"{i}. {name} - {row['count']}\n"

        kb = InlineKeyboardMarkup()
        if page > 1:
            kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"refstats_{page-1}"))
        if end < len(top):
            kb.add(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"refstats_{page+1}"))

        return text, kb
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_ref_stats_page: {e}")
        return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö", None

async def send_user_info(user_id, msg_or_cb):
    try:
        user = db.get_user(user_id)
        if not user:
            await msg_or_cb.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        ref_count = db.get_referral_count(user_id)
        text = (
            f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n"
            f"–ò–º—è: {user['name']}\n"
            f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{msg_or_cb.from_user.username or '–Ω–µ—Ç'}\n"
            f"ID: <code>{user['user_id']}</code>\n"
            f"–î–∞—Ç–∞ –≤—Ö–æ–¥–∞: {user['joined_at']}\n"
            f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {ref_count}"
        )
        kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è", callback_data="edit_name"),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")
        )
        await bot.send_message(user_id, text, reply_markup=kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_user_info: {e}")
        await msg_or_cb.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(F.text.startswith("/start"))
async def handle_start(message: Message):
    try:
        args = message.text.split()
        ref_id = int(args[1]) if len(args) > 1 and args[1].isdigit() else None
        user_id = message.from_user.id

        if db.get_user(user_id):
            await message.answer(WELCOME_TEXT, reply_markup=main_menu)
            return

        full_name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()
        db.add_user(user_id, name=full_name, referral_id=ref_id)
        await message.answer(WELCOME_TEXT, reply_markup=main_menu)

        if ref_id and ref_id != user_id and ADMIN_LOG_ID:
            await bot.send_message(
                ADMIN_LOG_ID,
                f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ –æ—Ç ID {ref_id}"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_start: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

@router.message(F.text == "/ref")
async def ref_link(message: Message):
    try:
        user_id = message.from_user.id
        link = f"https://t.me/{config.BOT_USERNAME}?start={user_id}"
        await message.answer(f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ref_link: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏")

@router.message(F.text == "/refstats")
async def ref_stats(message: Message):
    try:
        text, kb = await send_ref_stats_page(message.from_user.id)
        if kb:
            await message.answer(text, reply_markup=kb)
        else:
            await message.answer(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ref_stats: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")

@router.callback_query(F.data.startswith("refstats_"))
async def ref_stats_page(callback: CallbackQuery):
    try:
        page = int(callback.data.split("_")[1])
        text, kb = await send_ref_stats_page(callback.from_user.id, page)
        if kb:
            await callback.message.edit_text(text, reply_markup=kb)
        else:
            await callback.message.edit_text(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ref_stats_page: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    finally:
        await callback.answer()

@router.message(F.text == "/admin")
async def admin_panel(message: Message):
    try:
        if message.from_user.id not in config.ADMIN_IDS:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¨ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üßæ –õ–æ–≥ –æ—à–∏–±–æ–∫", callback_data="admin_logs")],
        ])
        await message.answer("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_panel: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–µ–ª–∏")

@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast(callback: CallbackQuery, state: FSMContext):
    try:
        await cmd_broadcast(callback.message, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_broadcast: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    try:
        count = len(db.get_all_users())
        await callback.message.answer(f"üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{count}</b>")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_stats: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    finally:
        await callback.answer()

@router.callback_query(F.data == "admin_logs")
async def admin_logs(callback: CallbackQuery):
    try:
        if not os.path.exists("bot.log"):
            await callback.message.answer("‚ö†Ô∏è –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        with open("bot.log", "r", encoding="utf-8") as f:
            last_lines = f.readlines()[-20:]
        
        if not last_lines:
            await callback.message.answer("üßæ –õ–æ–≥ –ø—É—Å—Ç")
            return

        text = "<b>üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–æ–≥–∞:</b>\n\n" + "".join(last_lines)
        await callback.message.answer(f"<code>{text}</code>", parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤: {e}")
        await callback.message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥: {e}")
    finally:
        await callback.answer()

@router.message(F.text == "/me")
async def user_info(message: Message):
    await send_user_info(message.from_user.id, message)

@router.callback_query(F.data == "menu_me"))
async def menu_me(callback: CallbackQuery):
    await callback.message.delete()
    await send_user_info(callback.from_user.id, callback)

@router.callback_query(F.data == "edit_name"))
async def edit_name(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        await state.set_state(EditNameState.WaitingForName)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_name: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        await callback.answer()

@router.message(EditNameState.WaitingForName, F.content_type == ContentType.TEXT)
async def receive_new_name(message: Message, state: FSMContext):
    try:
        new_name = message.text.strip()
        if len(new_name) > 50:
            await message.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∫–æ—Ä–æ—á–µ.")
            return
        db.update_user_name(message.from_user.id, new_name)
        await message.answer(f"‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {new_name}")
        await state.clear()
        await send_user_info(message.from_user.id, message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ receive_new_name: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏")

@router.message(F.text == "/broadcast"))
async def cmd_broadcast(message: Message, state: FSMContext):
    try:
        if message.from_user.id not in config.ADMIN_IDS:
            await message.reply("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return
        await message.answer("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–Ω–æ —Å –º–µ–¥–∏–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏):")
        await state.set_state(BroadcastStates.WaitingForMessage)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_broadcast: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(BroadcastStates.WaitingForMessage)
async def receive_broadcast_message(message: Message, state: FSMContext):
    try:
        await state.update_data(message=message)
        kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="broadcast_send"),
            InlineKeyboardButton("‚úíÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="broadcast_edit")
        )
        await message.answer("<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω.</b>\n\n–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=kb)
        await state.set_state(BroadcastStates.ConfirmingMessage)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ receive_broadcast_message: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "broadcast_edit", BroadcastStates.ConfirmingMessage)
async def edit_broadcast(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.answer("‚úèÔ∏èüëá –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        await state.set_state(BroadcastStates.WaitingForMessage)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_broadcast: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        await callback.answer()

@router.callback_query(F.data == "broadcast_send", BroadcastStates.ConfirmingMessage)
async def send_broadcast(callback: CallbackQuery, state: FSMContext):
    try:
        confirm_kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="broadcast_confirm"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")
        )
        await callback.message.edit_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
            reply_markup=confirm_kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_broadcast: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "broadcast_confirm")
async def confirm_broadcast(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        src_msg: Message = data["message"]
        
        await callback.message.edit_text("‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...")
        
        success, blocked, errors = 0, 0, 0
        users = db.get_all_users()
        total = len(users)
        
        for i, user in enumerate(users, 1):
            try:
                if src_msg.photo:
                    await bot.send_photo(user["user_id"], src_msg.photo[-1].file_id, caption=src_msg.caption or src_msg.text or "")
                elif src_msg.document:
                    await bot.send_document(user["user_id"], src_msg.document.file_id, caption=src_msg.caption or src_msg.text or "")
                elif src_msg.video:
                    await bot.send_video(user["user_id"], src_msg.video.file_id, caption=src_msg.caption or src_msg.text or "")
                else:
                    await bot.send_message(user["user_id"], src_msg.text or "")
                success += 1
                
                if i % 10 == 0:
                    await callback.message.edit_text(
                        f"‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n"
                        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{total}\n"
                        f"‚úîÔ∏è –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success}\n"
                        f"‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked}\n"
                        f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {errors}"
                    )
                    
            except TelegramForbiddenError:
                blocked += 1
                db.block_user(user["user_id"])
            except Exception as e:
                errors += 1
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ {user['user_id']}: {e}")

        await callback.message.edit_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
            f"‚úîÔ∏è –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success}\n"
            f"‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked}\n"
            f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {errors}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_broadcast: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ")
    finally:
        await state.clear()

@router.callback_query(F.data == "broadcast_cancel")
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
    finally:
        await state.clear()

async def main():
    try:
        db.init_db()
        dp.include_router(router)
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
