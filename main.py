import asyncio
import logging
import os
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.enums import ParseMode, ContentType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.utils.markdown import hbold, hcode

from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError, TelegramNotFound
from middlewares import RateLimiterMiddleware
import config
import db

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
logging.basicConfig(level=logging.INFO, format="[%(asctime)s] [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)
bot = Bot(token=config.BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
dp.message.middleware(RateLimiterMiddleware())
dp.callback_query.middleware(RateLimiterMiddleware())

# FSM
class EditNameState(StatesGroup):
    WaitingForName = State()

class BroadcastStates(StatesGroup):
    WaitingForMessage = State()
    ConfirmingMessage = State()

# –ú–µ–Ω—é
main_menu = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("‚ö†Ô∏è–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–±–æ–∏", callback_data="menu_last"),
    InlineKeyboardButton("üîó–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="menu_ref"),
    InlineKeyboardButton("üé≠ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ", callback_data="menu_me"),
    InlineKeyboardButton("üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞", callback_data="menu_admins"),
    InlineKeyboardButton("üïπÔ∏è–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="menu_commands")
)

WELCOME_TEXT = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ —Å–±–æ—è–º –†—É–Ω–µ—Ç–∞. üåê\n\n"
    "–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∫—Ä—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."
    " –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–±–æ–∏, –≤–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.\n\n"
    "‚ö†Ô∏è–ì–ª–∞–≤–Ω—ã–π –±–æ—Ç - @nosignalrubot\n"
    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏! üë•\n\n"
    "üëá–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∏–∂–µ:"
)
COMMANDS_TEXT = (
    "/last - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–æ–≤\n"
    "/ref - –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n"
    "/refstats - —Ç–æ–ø-10 –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º\n"
    "/admins - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞\n"
    "/admin - –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n"
    "/me - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ"
)
ADMIN_TEXT = "üë§–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞:\nü§¥@internetmodel - –≤–ª–∞–¥–µ–ª–µ—Ü\nüßë‚Äçüíª@overnightwatch - –∫–æ–¥–µ—Ä"
ADMIN_LOG_ID = config.ADMIN_IDS[0]

router = Router()

@router.message(F.text.startswith("/start"))
async def handle_start(message: Message):
    ref_id = int(message.text.split(maxsplit=1)[-1]) if len(message.text.split()) > 1 and message.text.split()[1].isdigit() else None
    user_id = message.from_user.id
    user = db.get_user(user_id)
    if user:
        await message.answer(WELCOME_TEXT, reply_markup=main_menu)
        return

    full_name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()
    db.add_user(user_id, name=full_name, referral_id=ref_id)
    await message.answer(WELCOME_TEXT, reply_markup=main_menu)

    if ref_id and ref_id != user_id:
        await bot.send_message(ADMIN_LOG_ID, f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ –æ—Ç ID {ref_id}")

@router.message(F.text == "/ref")
async def ref_link(message: Message):
    user_id = message.from_user.id
    link = f"https://t.me/{config.BOT_USERNAME}?start={user_id}"
    await message.answer(f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}")

@router.callback_query(F.data == "menu_main")
async def back_to_main(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(WELCOME_TEXT, reply_markup=main_menu)

@router.callback_query(F.data == "menu_last")
async def menu_last(callback: CallbackQuery):
    await callback.message.delete()
    messages = db.get_last_messages(limit=5)
    now = datetime.now(ZoneInfo("Europe/Moscow"))
    updated_time = now.strftime("%Y-%m-%d %H:%M")
    if not messages:
        text = f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ —Å–±–æ–µ–≤.\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_time} (GMT+3)"
    else:
        text = "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–æ–≤:\n\n" + "\n\n".join(
            f"üïí {msg['time']} (GMT+3):\n{msg['text']}" for msg in messages
        )
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main"))
    await callback.message.answer(text, reply_markup=kb)

@router.callback_query(F.data == "menu_admins")
async def menu_admins(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(ADMIN_TEXT, reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")))

@router.callback_query(F.data == "menu_commands")
async def menu_commands(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(COMMANDS_TEXT, reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")))

@router.message(F.text == "/me")
async def user_info(message: Message):
    await send_user_info(message.from_user.id, message)

@router.callback_query(F.data == "menu_me")
async def menu_me(callback: CallbackQuery):
    await callback.message.delete()
    await send_user_info(callback.from_user.id, callback)

async def send_user_info(user_id, msg_or_cb):
    user = db.get_user(user_id)
    if not user:
        await msg_or_cb.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    ref_count = db.get_referral_count(user_id)
    text = (
        f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n"
        f"–ò–º—è: {user['name']}\n"
        f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{msg_or_cb.from_user.username or '–Ω–µ—Ç'}\n"
        f"ID: <code>{user['user_id']}</code>\n"
        f"–î–∞—Ç–∞ –≤—Ö–æ–¥–∞: {user['joined_at']}\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {ref_count}"
    )
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è", callback_data="edit_name"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")
    )
    await bot.send_message(user_id, text, reply_markup=kb)

@router.callback_query(F.data == "edit_name")
async def edit_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    await state.set_state(EditNameState.WaitingForName)

@router.message(EditNameState.WaitingForName, F.content_type == ContentType.TEXT)
async def receive_new_name(message: Message, state: FSMContext):
    new_name = message.text.strip()
    if len(new_name) > 50:
        await message.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∫–æ—Ä–æ—á–µ.")
        return
    db.update_user_name(message.from_user.id, new_name)
    await message.answer(f"‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {new_name}")
    await state.clear()
    await send_user_info(message.from_user.id, message)

@router.message(F.text == "/broadcast")
async def cmd_broadcast(message: Message, state: FSMContext):
    if message.from_user.id not in config.ADMIN_IDS:
        await message.reply("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    await message.answer("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–Ω–æ —Å –º–µ–¥–∏–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏):")
    await state.set_state(BroadcastStates.WaitingForMessage)

@router.message(BroadcastStates.WaitingForMessage)
async def receive_broadcast_message(message: Message, state: FSMContext):
    await state.update_data(message=message)
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="broadcast_send"),
        InlineKeyboardButton("‚úíÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="broadcast_edit")
    )
    await message.answer("<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω.</b>\n\n–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=kb)
    await state.set_state(BroadcastStates.ConfirmingMessage)

@router.callback_query(F.data == "broadcast_edit", BroadcastStates.ConfirmingMessage)
async def edit_broadcast(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏èüëá –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    await state.set_state(BroadcastStates.WaitingForMessage)

@router.callback_query(F.data == "broadcast_send", BroadcastStates.ConfirmingMessage)
async def send_broadcast(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    src_msg: Message = data["message"]
    success, blocked = 0, 0
    for user in db.get_all_users():
        try:
            if src_msg.photo:
                await bot.send_photo(user["user_id"], src_msg.photo[-1].file_id, caption=src_msg.caption or src_msg.text or "")
            elif src_msg.document:
                await bot.send_document(user["user_id"], src_msg.document.file_id, caption=src_msg.caption or src_msg.text or "")
            elif src_msg.video:
                await bot.send_video(user["user_id"], src_msg.video.file_id, caption=src_msg.caption or src_msg.text or "")
            else:
                await bot.send_message(user["user_id"], src_msg.text or "")
            success += 1
        except TelegramForbiddenError:
            blocked += 1
            db.block_user(user["user_id"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ {user['user_id']}: {e}")

    await callback.message.edit_text(f"‚úÖ–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n‚úîÔ∏è –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success}\n‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked}")
    await state.clear()

async def main():
    db.init_db()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())




