import asyncio
import aiohttp
import logging
import subprocess
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.utils.exceptions import BotBlocked
from bs4 import BeautifulSoup
from datetime import datetime, timedelta, date

import config
import db

bot = Bot(token=config.BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

apps = {
    "telegram": "https://downdetector.su/status/telegram/",
    "youtube": "https://downdetector.su/status/youtube/",
    "vkontakte": "https://downdetector.su/status/vkontakte/",
    "tiktok": "https://downdetector.su/status/tiktok/",
}

WELCOME_TEXT = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ —Å–±–æ—è–º –†—É–Ω–µ—Ç–∞. üåê\n\n"
    "–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∫—Ä—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤. "
    "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–±–æ–∏, –≤–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.\n\n"
    "‚ö†Ô∏è–ì–ª–∞–≤–Ω—ã–π –±–æ—Ç - @nosignalrubot\n"
    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏! üë•\n\n"
    "üëá–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∏–∂–µ:"
)

COMMANDS_TEXT = (
    "/last - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–æ–≤\n"
    "/ref - –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n"
    "/refstats - —Ç–æ–ø-10 –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º\n"
    "/admins - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞\n"
    "/admin - –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"
)

ADMIN_TEXT = (
    "üë§–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞:\n"
    "ü§¥@internetmodel - –≤–ª–∞–¥–µ–ª–µ—Ü\n"
    "üßë‚Äçüíª@overnightwatch - –∫–æ–¥–µ—Ä"
)

ADMIN_LOG_ID = config.ADMIN_IDS[0]

main_menu = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üõ†Ô∏è–°–µ—Ä–≤–∏—Å—ã", callback_data="menu_services"),
    InlineKeyboardButton("‚ö†Ô∏è–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–±–æ–∏", callback_data="menu_last"),
    InlineKeyboardButton("üîó–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="menu_ref"),
    InlineKeyboardButton("üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞", callback_data="menu_admins"),
    InlineKeyboardButton("üïπÔ∏è–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="menu_commands")
)

@dp.message_handler(commands=["start"])
async def handle_start(message: types.Message):
    ref_id = None
    if message.get_args():
        try:
            ref_id = int(message.get_args())
        except ValueError:
            pass
    full_name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()
    db.add_user(message.from_user.id, name=full_name, referral_id=ref_id)
    await message.answer(WELCOME_TEXT, reply_markup=main_menu)

    if ref_id and ref_id != message.from_user.id:
        await bot.send_message(
            ADMIN_LOG_ID,
            f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ –æ—Ç ID {ref_id}"
        )

@dp.callback_query_handler(lambda c: c.data == "menu_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.delete()
    await bot.send_message(callback.from_user.id, WELCOME_TEXT, reply_markup=main_menu)

@dp.callback_query_handler(lambda c: c.data == "menu_services")
async def menu_services(callback: types.CallbackQuery):
    await callback.message.delete()
    kb = InlineKeyboardMarkup(row_width=2)
    for name in apps:
        kb.insert(InlineKeyboardButton(name.capitalize(), callback_data=f"app_{name}"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main"))
    await bot.send_message(callback.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂–∞–ª–æ–±:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("app_"))
async def show_app_stats(callback: types.CallbackQuery):
    name = callback.data[4:]
    await callback.message.delete()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø–æ–º–æ—â—å—é Puppeteer
    try:
        result = subprocess.run(["node", "make_graph.js", name], capture_output=True, text=True, timeout=15)
        if result.returncode != 0:
            raise Exception(result.stderr)
        img_path = f"graphs/{name}_graph.png"
        if not os.path.exists(img_path):
            raise FileNotFoundError(f"–§–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {img_path}")

        text = (
            f"‚ö†Ô∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ {name.capitalize()}\n\n"
            f"üìä –ì—Ä–∞—Ñ–∏–∫ –∂–∞–ª–æ–± –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã\n\n"
            f"üõú@nosignalrubot"
        )
        back = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_services"))
        with open(img_path, "rb") as photo:
            await bot.send_photo(callback.from_user.id, photo=photo, caption=text, reply_markup=back)
    except Exception as e:
        await bot.send_message(callback.from_user.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫: {e}")

@dp.callback_query_handler(lambda c: c.data == "menu_last")
async def menu_last(callback: types.CallbackQuery):
    await callback.message.delete()
    messages = db.get_last_messages(limit=5)
    if not messages:
        now = datetime.utcnow() + timedelta(hours=4)
        updated_time = now.strftime("%Y-%m-%d %H:%M")
        text = f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ —Å–±–æ–µ–≤.\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_time} (GMT+4)"
    else:
        text = "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–æ–≤:\n\n" + "\n\n".join(
            f"üïí {msg['time']} (GMT+4):\n{msg['text']}" for msg in messages
        )
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main"))
    await bot.send_message(callback.from_user.id, text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "menu_ref")
async def menu_ref(callback: types.CallbackQuery):
    await callback.message.delete()
    user_id = callback.from_user.id
    bot_username = (await bot.get_me()).username
    referral_link = f"https://t.me/{bot_username}?start={user_id}"
    count = db.get_referral_count(user_id)
    rank = db.get_referral_ranking(user_id)
    text = (
        f"‚úîÔ∏è <a href=\"{referral_link}\">—Å—Å—ã–ª–∫–∞</a> ‚Äî –≤–æ—Ç —Ç–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ª—é–¥–µ–π –≤ –±–æ—Ç–∞.\n\n"
        f"üéØ–í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {count}\n"
        f"ü•á–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Å–ø–∏—Å–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {rank}"
    )
    kb = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=referral_link),
        InlineKeyboardButton("ü§¥ –¢–æ–ø –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="menu_refstats"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")
    )
    await bot.send_message(callback.from_user.id, text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "menu_refstats")
async def menu_refstats(callback: types.CallbackQuery):
    await callback.message.delete()
    top_users = db.get_top_referrers(limit=10)
    if not top_users:
        text = "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞."
    else:
        lines = []
        for i, user in enumerate(top_users):
            name = user['name'] if user['name'] else f"id:{user['user_id']}"
            lines.append(f"{i+1}. {name} ‚Äî {user['count']} –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö")
        text = "üèÜ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º:\n\n" + "\n".join(lines)
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_ref"))
    await bot.send_message(callback.from_user.id, text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "menu_admins")
async def menu_admins(callback: types.CallbackQuery):
    await callback.message.delete()
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main"))
    await bot.send_message(callback.from_user.id, ADMIN_TEXT, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "menu_commands")
async def menu_commands(callback: types.CallbackQuery):
    await callback.message.delete()
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main"))
    await bot.send_message(callback.from_user.id, COMMANDS_TEXT, reply_markup=kb)

# –ó–∞–ø—É—Å–∫
async def main():
    db.init_db()
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())



