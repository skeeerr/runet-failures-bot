from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
from aiogram.utils.exceptions import BotBlocked
import logging
from datetime import datetime
import pytz

import config
import db
import utils

bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

tz = pytz.timezone('Asia/Dubai') 

WELCOME_TEXT = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ —Å–±–æ—è–º –†—É–Ω–µ—Ç–∞. –¢–µ–ø–µ—Ä—å —Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–±–æ—è—Ö –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. üåê\n"
    "–ï—Å–ª–∏ –Ω–∞–¥–æ–µ—Å—Ç ‚Äî –±–ª–æ–∫–∏—Ä—É–π –±–æ—Ç–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ª–µ—Ç–µ—Ç—å —Ç–µ–±–µ –Ω–µ –±—É–¥—É—Ç ‚ù§Ô∏è\n"
    "–í—Å—è –æ—Å—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –±–æ—Ç–æ–≤ –±—É–¥—É—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ üëá\n"
    "‚ö†Ô∏è–ì–ª–∞–≤–Ω—ã–π –±–æ—Ç - @downdetect0rbot\n"
    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏! üë•"
)

ADMINS_TEXT = (
    "üë§–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞:\n"
    "ü§¥@internetmodel - –≤–ª–∞–¥–µ–ª–µ—Ü, –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –±–æ—Ç–∞ - –∫ –Ω–µ–º—É\n"
    "üßë‚Äçüíª@overnightwatch - –∫–æ–¥–µ—Ä, –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –∏—Ö –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"
)

COMMANDS_TEXT = (
    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    "/last - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–±–æ—è—Ö\n"
    "/mirror - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–µ—Ä–∫–∞–ª–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @botfather\n"
    "/admins - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞ (–µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å –Ω–∏–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è)"
)

@dp.message_handler(commands=["start"])
async def handle_start(message: types.Message):
    ref_id = None
    if message.get_args():
        try:
            ref_id = int(message.get_args())
        except ValueError:
            pass

    db.add_user(message.from_user.id, referral_id=ref_id)
    await message.answer(WELCOME_TEXT)

@dp.message_handler(commands=["stats"])
async def handle_stats(message: types.Message):
    if message.from_user.id not in config.ADMIN_IDS:
        return
    stats = db.get_stats()
    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}\n"
        f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {stats['blocked']}\n"
        f"–ù–æ–≤—ã—Ö –∑–∞ –¥–µ–Ω—å: {stats['daily']}\n"
        f"–ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['weekly']}\n"
        f"–ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {stats['monthly']}"
    )
    await message.answer(text)

@dp.message_handler(commands=["ref"])
async def handle_ref(message: types.Message):
    link = await utils.generate_referral_link(bot, message.from_user.id)
    await message.answer(f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}")

@dp.message_handler(commands=["broadcast"])
async def broadcast_message(message: types.Message):
    if message.from_user.id not in config.ADMIN_IDS:
        return
    if not message.reply_to_message:
        await message.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        return

    text = message.reply_to_message.text
    now = datetime.now(tz)
    db.save_last_message(text, now.strftime("%Y-%m-%d %H:%M:%S"))
    
    count = 0
    for user_id in db.get_active_users():
        try:
            await bot.send_message(user_id, text)
            count += 1
        except BotBlocked:
            db.block_user(user_id)
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

@dp.message_handler(commands=["last"])
async def handle_last(message: types.Message):
    last_messages = db.get_last_messages()
    if not last_messages:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Å–±–æ—è—Ö.")
        return
    
    response = "üì¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–±–æ—è—Ö:\n\n"
    for msg in last_messages:
        response += f"üïí {msg['timestamp']} (UTC+4)\n"
        response += f"{msg['message']}\n\n"
    
    await message.answer(response)

@dp.message_handler(commands=["admins"])
async def handle_admins(message: types.Message):
    await message.answer(ADMINS_TEXT)

@dp.message_handler(commands=["mirror"])
async def handle_mirror(message: types.Message):
    instructions = (
        "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–µ—Ä–∫–∞–ª–æ —ç—Ç–æ–≥–æ –±–æ—Ç–∞:\n"
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ @BotFather\n"
        "2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π /newbot\n"
        "3. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞\n"
        "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞\n\n"
    )
    await message.answer(instructions)

@dp.message_handler(commands=["command"])
async def handle_commands(message: types.Message):
    await message.answer(COMMANDS_TEXT)

from aiogram.utils.executor import start_webhook

if __name__ == "__main__":
   
    WEBHOOK_HOST = 'https://runet-failures-bot.onrender.com/'  
    WEBHOOK_PATH = '/webhook'
    WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
    

    WEBAPP_HOST = '0.0.0.0'  
    WEBAPP_PORT = 10000  
    
    async def on_startup(dp):
        await bot.set_webhook(WEBHOOK_URL)
        logging.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫")
    
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
