import asyncio
import logging
from datetime import datetime
from zoneinfo import ZoneInfo

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode, ContentType
from aiogram.exceptions import TelegramForbiddenError
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    Message,
)
from middlewares import RateLimiterMiddleware
import config
import db

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="[%(asctime)s] %(levelname)s - %(name)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=config.BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
dp.message.middleware(RateLimiterMiddleware())
dp.callback_query.middleware(RateLimiterMiddleware())

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class EditNameState(StatesGroup):
    WaitingForName = State()

class BroadcastStates(StatesGroup):
    WaitingForMessage = State()
    ConfirmingMessage = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ö†Ô∏è–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–±–æ–∏", callback_data="menu_last")],
    [InlineKeyboardButton(text="üîó–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="menu_ref")],
    [InlineKeyboardButton(text="üé≠ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ", callback_data="menu_me")],
    [InlineKeyboardButton(text="üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞", callback_data="menu_admins")],
    [InlineKeyboardButton(text="üïπÔ∏è–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="menu_commands")],
])

WELCOME_TEXT = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ —Å–±–æ—è–º –†—É–Ω–µ—Ç–∞. üåê\n\n"
    "–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∫—Ä—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.\n"
    "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–±–æ–∏, –≤–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.\n\n"
    "‚ö†Ô∏è–ì–ª–∞–≤–Ω—ã–π –±–æ—Ç - @nosignalrubot\n"
    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏! üë•\n\n"
    "üëá–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∏–∂–µ:"
)

COMMANDS_TEXT = (
    "/last - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–æ–≤\n"
    "/ref - –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n"
    "/refstats - —Ç–æ–ø-10 –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º\n"
    "/admins - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞\n"
    "/admin - –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n"
    "/me - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ"
)

ADMIN_TEXT = (
    "üë§–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞:\n"
    "ü§¥@internetmodel - –≤–ª–∞–¥–µ–ª–µ—Ü\n"
    "üßë‚Äçüíª@overnightwatch - –∫–æ–¥–µ—Ä"
)

ADMIN_LOG_ID = config.ADMIN_IDS[0]

# –°—Ç–∞—Ä—Ç
@router.message(F.text.startswith("/start"))
async def handle_start(message: Message):
    args = message.text.split()
    ref_id = int(args[1]) if len(args) > 1 and args[1].isdigit() else None
    user_id = message.from_user.id

    if db.get_user(user_id):
        await message.answer(WELCOME_TEXT, reply_markup=main_menu)
        return

    full_name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()
    db.add_user(user_id, name=full_name, referral_id=ref_id)
    await message.answer(WELCOME_TEXT, reply_markup=main_menu)

    if ref_id and ref_id != user_id:
        await bot.send_message(
            ADMIN_LOG_ID,
            f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ –æ—Ç ID {ref_id}"
        )

# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
@router.message(F.text == "/ref")
async def ref_link(message: Message):
    user_id = message.from_user.id
    link = f"https://t.me/{config.BOT_USERNAME}?start={user_id}"
    await message.answer(f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}")

# –¢–æ–ø –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
@router.message(F.text == "/refstats")
async def ref_stats(message: Message):
    top = db.get_top_referrers()
    if not top:
        await message.answer("üë• –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    text = "üë• <b>–¢–æ–ø 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b>\n"
    for i, row in enumerate(top, 1):
        name = row['name'] or f"ID {row['user_id']}"
        text += f"{i}. {name} - {row['count']}\n"
    await message.answer(text)

# –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(F.text == "/admin")
async def admin_panel(message: Message):
    if message.from_user.id not in config.ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¨ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üßæ –õ–æ–≥ –æ—à–∏–±–æ–∫", callback_data="admin_logs")],
    ])
    await message.answer("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=kb)

@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast(callback: CallbackQuery, state: FSMContext):
    await cmd_broadcast(callback.message, state)

@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    count = len(db.get_all_users())
    await callback.message.answer(f"üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{count}</b>")

@router.callback_query(F.data == "admin_logs")
async def admin_logs(callback: CallbackQuery):
    try:
        with open("bot.log", "r", encoding="utf-8") as f:
            last_lines = f.readlines()[-20:]
        text = "<b>üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–æ–≥–∞:</b>\n\n" + "".join(last_lines)
        await callback.message.answer(f"<code>{text}</code>", parse_mode=ParseMode.HTML)
    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥: {e}")
@router.message(F.text == "/me")
async def user_info(message: Message):
    await send_user_info(message.from_user.id, message)

@router.callback_query(F.data == "menu_me")
async def menu_me(callback: CallbackQuery):
    await callback.message.delete()
    await send_user_info(callback.from_user.id, callback)

async def send_user_info(user_id, msg_or_cb):
    user = db.get_user(user_id)
    if not user:
        await msg_or_cb.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    ref_count = db.get_referral_count(user_id)
    text = (
        f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n"
        f"–ò–º—è: {user['name']}\n"
        f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{msg_or_cb.from_user.username or '–Ω–µ—Ç'}\n"
        f"ID: <code>{user['user_id']}</code>\n"
        f"–î–∞—Ç–∞ –≤—Ö–æ–¥–∞: {user['joined_at']}\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {ref_count}"
    )
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è", callback_data="edit_name"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")
    )
    await bot.send_message(user_id, text, reply_markup=kb)

@router.callback_query(F.data == "edit_name")
async def edit_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    await state.set_state(EditNameState.WaitingForName)

@router.message(EditNameState.WaitingForName, F.content_type == ContentType.TEXT)
async def receive_new_name(message: Message, state: FSMContext):
    new_name = message.text.strip()
    if len(new_name) > 50:
        await message.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∫–æ—Ä–æ—á–µ.")
        return
    db.update_user_name(message.from_user.id, new_name)
    await message.answer(f"‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {new_name}")
    await state.clear()
    await send_user_info(message.from_user.id, message)

@router.message(F.text == "/broadcast")
async def cmd_broadcast(message: Message, state: FSMContext):
    if message.from_user.id not in config.ADMIN_IDS:
        await message.reply("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    await message.answer("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–Ω–æ —Å –º–µ–¥–∏–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏):")
    await state.set_state(BroadcastStates.WaitingForMessage)

@router.message(BroadcastStates.WaitingForMessage)
async def receive_broadcast_message(message: Message, state: FSMContext):
    await state.update_data(message=message)
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="broadcast_send"),
        InlineKeyboardButton("‚úíÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="broadcast_edit")
    )
    await message.answer("<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω.</b>\n\n–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=kb)
    await state.set_state(BroadcastStates.ConfirmingMessage)

@router.callback_query(F.data == "broadcast_edit", BroadcastStates.ConfirmingMessage)
async def edit_broadcast(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏èüëá –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    await state.set_state(BroadcastStates.WaitingForMessage)

@router.callback_query(F.data == "broadcast_send", BroadcastStates.ConfirmingMessage)
async def send_broadcast(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    src_msg: Message = data["message"]
    success, blocked = 0, 0
    for user in db.get_all_users():
        try:
            if src_msg.photo:
                await bot.send_photo(user["user_id"], src_msg.photo[-1].file_id, caption=src_msg.caption or src_msg.text or "")
            elif src_msg.document:
                await bot.send_document(user["user_id"], src_msg.document.file_id, caption=src_msg.caption or src_msg.text or "")
            elif src_msg.video:
                await bot.send_video(user["user_id"], src_msg.video.file_id, caption=src_msg.caption or src_msg.text or "")
            else:
                await bot.send_message(user["user_id"], src_msg.text or "")
            success += 1
        except TelegramForbiddenError:
            blocked += 1
            db.block_user(user["user_id"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ {user['user_id']}: {e}")

    await callback.message.edit_text(f"‚úÖ–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n‚úîÔ∏è –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success}\n‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked}")
    await state.clear()

async def main():
    db.init_db()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

from middlewares import RateLimiterMiddleware

