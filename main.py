import asyncio
import aiohttp
import logging
import matplotlib.pyplot as plt
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.utils.exceptions import BotBlocked
from bs4 import BeautifulSoup
from datetime import datetime, timedelta, date

import config
import db

bot = Bot(token=config.BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

apps = {
    "telegram": "https://downdetector.su/status/telegram/",
    "youtube": "https://downdetector.su/status/youtube/",
    "vkontakte": "https://downdetector.su/status/vkontakte/",
    "tiktok": "https://downdetector.su/status/tiktok/",
}

app_status = {name: False for name in apps}
current_log_date = date.today()

WELCOME_TEXT = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ —Å–±–æ—è–º –†—É–Ω–µ—Ç–∞. –¢–µ–ø–µ—Ä—å —Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–±–æ—è—Ö –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. üåê\n"
    "–ï—Å–ª–∏ –Ω–∞–¥–æ–µ—Å—Ç ‚Äî –±–ª–æ–∫–∏—Ä—É–π –±–æ—Ç–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ª–µ—Ç–µ—Ç—å —Ç–µ–±–µ –Ω–µ –±—É–¥—É—Ç ‚ù§Ô∏è\n"
    "–í—Å—è –æ—Å—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –±–æ—Ç–æ–≤ –±—É–¥—É—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ üëá\n"
    "‚ö†Ô∏è–ì–ª–∞–≤–Ω—ã–π –±–æ—Ç - @downdetect0rbot\n"
    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏! üë•"
)

ADMIN_TEXT = (
    "üë§–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞:\n"
    "ü§¥@internetmodel - –≤–ª–∞–¥–µ–ª–µ—Ü, –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –±–æ—Ç–∞ - –∫ –Ω–µ–º—É\n"
    "üßë‚Äçüíª@overnightwatch - –∫–æ–¥–µ—Ä, –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –∏—Ö –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"
)

COMMANDS_TEXT = (
    "/last - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–±–æ—è—Ö\n"
    "/ref - –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n"
    "/refstats - —Ç–æ–ø-10 –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º\n"
    "/admins - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞ (–µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å –Ω–∏–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è)\n"
    "/admin - –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"
)

ADMIN_LOG_ID = config.ADMIN_IDS[0]

def draw_graph(values, name):
    plt.figure(figsize=(8, 3))
    plt.plot(values, marker='o', color='red')
    plt.title(f"–ñ–∞–ª–æ–±—ã –Ω–∞ {name.capitalize()}")
    plt.xlabel("–ß–∞—Å—ã –Ω–∞–∑–∞–¥")
    plt.ylabel("–ñ–∞–ª–æ–±—ã")
    plt.tight_layout()
    path = f"{name}_graph.png"
    plt.savefig(path)
    plt.close()
    return path

async def fetch_data(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            html = await resp.text()
            soup = BeautifulSoup(html, "html.parser")
            try:
                hourly = int(soup.select_one("div.report-count-hour span").text)
                daily = int(soup.select_one("div.report-count-day span").text)
                script = soup.find("script", string=lambda t: t and "Highcharts.chart" in t).text
                start = script.find("data: [") + 7
                end = script.find("]", start)
                values = [int(x.strip()) for x in script[start:end].split(",")]
                return hourly, daily, values
            except:
                return 0, 0, []

async def notify_users(text):
    for user_id in db.get_active_users():
        try:
            await bot.send_message(user_id, text)
        except:
            pass

async def send_admin_log(text):
    try:
        await bot.send_message(ADMIN_LOG_ID, f"[–õ–û–ì] {text}")
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

async def monitor():
    while True:
        for name, url in apps.items():
            hourly, _, _ = await fetch_data(url)
            is_now_failing = hourly >= 40
            was_failing = app_status[name]
            if is_now_failing and not was_failing:
                app_status[name] = True
                await notify_users(f"‚ö†Ô∏è–°–±–æ–π –≤ —Ä–∞–±–æ—Ç–µ {name.capitalize()}\n\nüõú@nosignalrubot")
            elif not is_now_failing and was_failing:
                app_status[name] = False
                await notify_users(f"‚úÖ{name.capitalize()} - —Ä–∞–±–æ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n\nüõú@nosignalrubot")
        await asyncio.sleep(300)

@dp.message_handler(commands=["start"])
async def handle_start(message: types.Message):
    ref_id = None
    if message.get_args():
        try:
            ref_id = int(message.get_args())
        except ValueError:
            pass
    full_name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()
    db.add_user(message.from_user.id, name=full_name, referral_id=ref_id)
    await message.answer(WELCOME_TEXT)

    if ref_id and ref_id != message.from_user.id:
        await bot.send_message(
            ADMIN_LOG_ID,
            f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ –æ—Ç ID {ref_id}"
        )

@dp.message_handler(commands=["fail"])
async def handle_fail(message: types.Message):
    kb = InlineKeyboardMarkup(row_width=2)
    for name in apps:
        kb.insert(InlineKeyboardButton(name.capitalize(), callback_data=f"app_{name}"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("app_"))
async def show_app_stats(callback: types.CallbackQuery):
    name = callback.data[4:]
    url = apps[name]
    hourly, daily, values = await fetch_data(url)
    path = draw_graph(values, name)

    text = (
        f"‚ö†Ô∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ {name.capitalize()}\n"
        f"‚ùó–ñ–∞–ª–æ–± –∑–∞ —á–∞—Å: {hourly}\n"
        f"‚ùï–ñ–∞–ª–æ–± –∑–∞ —Å—É—Ç–∫–∏: {daily}\n\n"
        f"üõú@nosignalrubot"
    )

    back = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))
    await bot.send_photo(callback.message.chat.id, photo=open(path, "rb"), caption=text, reply_markup=back)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "back")
async def go_back(callback: types.CallbackQuery):
    await handle_fail(callback.message)
    await callback.answer()

@dp.message_handler(commands=["ref"])
async def handle_ref(message: types.Message):
    user_id = message.from_user.id
    bot_username = (await bot.get_me()).username
    referral_link = f"https://t.me/{bot_username}?start={user_id}"
    count = db.get_referral_count(user_id)
    rank = db.get_referral_ranking(user_id)
    text = (
        f"‚úîÔ∏è <a href=\"{referral_link}\">—Å—Å—ã–ª–∫–∞</a> - –≤–æ—Ç —Ç–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ª—é–¥–µ–π –≤ –±–æ—Ç–∞.\n\n"
        f"üéØ–í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {count}\n"
        f"ü•á–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Å–ø–∏—Å–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {rank}"
    )
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=referral_link))
    await message.answer(text, reply_markup=kb)

@dp.message_handler(commands=["refstats"])
async def handle_ref_stats(message: types.Message):
    top_users = db.get_top_referrers(limit=10)
    if not top_users:
        await message.answer("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        return
    lines = []
    for i, user in enumerate(top_users, start=1):
        name = user['name'] or f"id:{user['user_id']}"
        count = user['count']
        lines.append(f"{i}. {name} ‚Äî {count} –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö")
    text = "üèÜ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º:\n\n" + "\n".join(lines)
    await message.answer(text)

@dp.message_handler(commands=["admins"])
async def handle_admins(message: types.Message):
    await message.answer(ADMIN_TEXT)

@dp.message_handler(commands=["command"])
async def handle_command(message: types.Message):
    await message.answer(COMMANDS_TEXT)

@dp.message_handler(commands=["admin"])
async def handle_admin_panel(message: types.Message):
    if message.from_user.id not in config.ADMIN_IDS:
        return
    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        InlineKeyboardButton("üì® –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_lastmsg"),
        InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
        InlineKeyboardButton("üë• –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="admin_refstats")
    )
    await message.answer("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("admin_"))
async def process_admin_panel_callback(callback_query: types.CallbackQuery):
    data = callback_query.data
    if callback_query.from_user.id not in config.ADMIN_IDS:
        return
    if data == "admin_stats":
        stats = db.get_stats()
        text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"üìà–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}\n"
            f"üîí–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {stats['blocked']}\n"
            f"üÜï–ù–æ–≤—ã—Ö –∑–∞ –¥–µ–Ω—å: {stats['daily']}\n"
            f"üÜï–ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['weekly']}\n"
            f"üÜï–ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {stats['monthly']}"
        )
        await callback_query.message.edit_text(text)
    elif data == "admin_lastmsg":
        messages = db.get_last_messages(limit=1)
        if not messages:
            await callback_query.message.edit_text("–ü–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            msg = messages[0]
            await callback_query.message.edit_text(f"üïí {msg['time']} (GMT+4):\n{msg['text']}")
    elif data == "admin_broadcast":
        await callback_query.message.edit_text("–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω—É–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /broadcast.")
    elif data == "admin_refstats":
        top_users = db.get_top_referrers(limit=10)
        if not top_users:
            await callback_query.message.edit_text("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        else:
            lines = []
            for i, user in enumerate(top_users, start=1):
                name = user['name'] or f"id:{user['user_id']}"
                count = user['count']
                lines.append(f"{i}. {name} ‚Äî {count} –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö")
            text = "üèÜ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º:\n\n" + "\n".join(lines)
            await callback_query.message.edit_text(text)

@dp.message_handler(commands=["broadcast"])
async def broadcast_message(message: types.Message):
    if message.from_user.id not in config.ADMIN_IDS:
        return
    if not message.reply_to_message:
        await message.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        return
    text = message.reply_to_message.text
    db.save_last_message(text)
    count = 0
    for user_id in db.get_active_users():
        try:
            await bot.send_message(user_id, text)
            count += 1
        except BotBlocked:
            db.block_user(user_id)
        except Exception as e:
            await send_admin_log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user_id}: {e}")
    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    await send_admin_log(f"Broadcast –æ—Ç {message.from_user.id}: –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

@dp.message_handler(commands=["last"])
async def handle_last(message: types.Message):
    global current_log_date
    today = date.today()
    if today != current_log_date:
        db.clear_old_messages()
        current_log_date = today
        await send_admin_log("–°–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –¥–Ω—è.")
    messages = db.get_last_messages(limit=5)
    if not messages:
        now = datetime.utcnow() + timedelta(hours=4)
        updated_time = now.strftime("%Y-%m-%d %H:%M")
        await message.answer(f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ —Å–±–æ–µ–≤.\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_time} (GMT+4)")
        return
    formatted = "\n\n".join(f"üïí {msg['time']} (GMT+4):\n{msg['text']}" for msg in messages)
    await message.answer(f"üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–æ–≤:\n\n{formatted}")

async def main():
    db.init_db()
    asyncio.create_task(monitor())
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())
