
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.utils.exceptions import BotBlocked
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta, date
import logging
import os

import config
import db

bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

WELCOME_TEXT = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ —Å–±–æ—è–º –†—É–Ω–µ—Ç–∞. –¢–µ–ø–µ—Ä—å —Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–±–æ—è—Ö –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. üåê\n"
    "–ï—Å–ª–∏ –Ω–∞–¥–æ–µ—Å—Ç ‚Äî –±–ª–æ–∫–∏—Ä—É–π –±–æ—Ç–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ª–µ—Ç–µ—Ç—å —Ç–µ–±–µ –Ω–µ –±—É–¥—É—Ç ‚ù§Ô∏è\n"
    "–í—Å—è –æ—Å—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –±–æ—Ç–æ–≤ –±—É–¥—É—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ üëá\n"
    "‚ö†Ô∏è–ì–ª–∞–≤–Ω—ã–π –±–æ—Ç - @downdetect0rbot\n"
    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏! üë•"
)

ADMIN_TEXT = (
    "üë§–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞:\n"
    "ü§¥@internetmodel - –≤–ª–∞–¥–µ–ª–µ—Ü, –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –±–æ—Ç–∞ - –∫ –Ω–µ–º—É\n"
    "üßë‚Äçüíª@overnightwatch - –∫–æ–¥–µ—Ä, –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –∏—Ö –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"
)

COMMANDS_TEXT = (
    "/last - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–±–æ—è—Ö\n"
    "/ref - –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n"
    "/refstats - —Ç–æ–ø-10 –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º\n"
    "/admins - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞ (–µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å –Ω–∏–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è)"
)

ADMIN_LOG_ID = 602393297
current_log_date = date.today()

async def send_admin_log(text):
    try:
        await bot.send_message(ADMIN_LOG_ID, f"[–õ–û–ì] {text}")
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

@dp.message_handler(commands=["start"])
async def handle_start(message: types.Message):
    ref_id = None
    if message.get_args():
        try:
            ref_id = int(message.get_args())
        except ValueError:
            pass
    full_name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()
    db.add_user(message.from_user.id, name=full_name, referral_id=ref_id)
    await message.answer(WELCOME_TEXT)

@dp.message_handler(commands=["stats"])
async def handle_stats(message: types.Message):
    if message.from_user.id not in config.ADMIN_IDS:
        return
    stats = db.get_stats()
    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üìà–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}\n"
        f"üîí–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {stats['blocked']}\n"
        f"üÜï–ù–æ–≤—ã—Ö –∑–∞ –¥–µ–Ω—å: {stats['daily']}\n"
        f"üÜï–ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['weekly']}\n"
        f"üÜï–ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {stats['monthly']}"
    )
    await message.answer(text)

@dp.message_handler(commands=["broadcast"])
async def broadcast_message(message: types.Message):
    if message.from_user.id not in config.ADMIN_IDS:
        return
    if not message.reply_to_message:
        await message.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        return

    text = message.reply_to_message.text
    db.save_last_message(text)
    count = 0
    for user_id in db.get_active_users():
        try:
            await bot.send_message(user_id, text)
            count += 1
        except BotBlocked:
            db.block_user(user_id)
        except Exception as e:
            await send_admin_log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user_id}: {e}")
    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    await send_admin_log(f"Broadcast –æ—Ç {message.from_user.id}: –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

@dp.message_handler(commands=["last"])
async def handle_last(message: types.Message):
    global current_log_date
    today = date.today()
    if today != current_log_date:
        db.clear_old_messages()
        current_log_date = today
        await send_admin_log("–°–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –¥–Ω—è.")

    messages = db.get_last_messages(limit=5)
    if not messages:
        now = datetime.utcnow() + timedelta(hours=4)
        updated_time = now.strftime("%Y-%m-%d %H:%M")
        await message.answer(f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ —Å–±–æ–µ–≤.\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_time} (GMT+4)")
        return

    formatted = "\n\n".join(f"üïí {msg['time']} (GMT+4):\n{msg['text']}" for msg in messages)
    await message.answer(f"üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–æ–≤:\n\n{formatted}")

@dp.message_handler(commands=["admins"])
async def handle_admins(message: types.Message):
    await message.answer(ADMIN_TEXT)

@dp.message_handler(commands=["command"])
async def handle_command(message: types.Message):
    await message.answer(COMMANDS_TEXT)

@dp.message_handler(commands=["ref"])
async def handle_ref(message: types.Message):
    user_id = message.from_user.id
    bot_username = (await bot.get_me()).username
    referral_link = f"https://t.me/{bot_username}?start={user_id}"

    count = db.get_referral_count(user_id)
    rank = db.get_referral_ranking(user_id)

    text = (
        f"‚úîÔ∏è [—Å—Å—ã–ª–∫–∞]({referral_link}) - –≤–æ—Ç —Ç–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ª—é–¥–µ–π –≤ –±–æ—Ç–∞.\n\n"
        f"üéØ–í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: *{count}*\n"
        f"ü•á–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Å–ø–∏—Å–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{rank}*"
    )

    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=referral_link)
    )

    await message.answer(text, parse_mode="Markdown", reply_markup=kb)

@dp.message_handler(commands=["refstats"])
async def handle_ref_stats(message: types.Message):
    top_users = db.get_top_referrers(limit=10)
    if not top_users:
        await message.answer("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        return

    lines = []
    for i, user in enumerate(top_users, start=1):
        name = user['name'] or f"id:{user['user_id']}"
        count = user['count']
        lines.append(f"{i}. {name} ‚Äî {count} –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö")

    text = "üèÜ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º:\n\n" + "\n".join(lines)
    await message.answer(text)

if __name__ == "__main__":
    executor.start_polling(dp)
